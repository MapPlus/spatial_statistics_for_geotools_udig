/*
 *    GeoTools - The Open Source Java GIS Toolkit
 *    http://geotools.org
 *
 *    (C) 2014, Open Source Geospatial Foundation (OSGeo)
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package org.geotools.process.spatialstatistics;

import java.awt.Font;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.font.FontRenderContext;
import java.awt.font.TextLayout;
import java.awt.geom.AffineTransform;
import java.awt.geom.PathIterator;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.geotools.data.DataStore;
import org.geotools.data.DataStoreFinder;
import org.geotools.data.FeatureSource;
import org.geotools.data.collection.ListFeatureCollection;
import org.geotools.data.shapefile.ShapefileDataStore;
import org.geotools.data.shapefile.ShapefileDataStoreFactory;
import org.geotools.data.shapefile.ShapefileDirectoryFactory;
import org.geotools.data.simple.SimpleFeatureCollection;
import org.geotools.data.simple.SimpleFeatureIterator;
import org.geotools.data.simple.SimpleFeatureSource;
import org.geotools.filter.FilterFactoryImpl;
import org.geotools.geometry.DirectPosition2D;
import org.geotools.geometry.jts.JTS;
import org.geotools.process.Process;
import org.geotools.process.ProcessException;
import org.geotools.process.ProcessFactory;
import org.geotools.process.spatialstatistics.core.Params;
import org.geotools.process.spatialstatistics.operations.FeatureToLineOperation;
import org.geotools.process.spatialstatistics.operations.FeatureToPolygonOperation;
import org.geotools.process.spatialstatistics.operations.LabelToGeometryOperation;
import org.geotools.process.spatialstatistics.storage.ShapeExportOperation;
import org.geotools.referencing.CRS;
import org.geotools.referencing.operation.transform.AffineTransform2D;
import org.geotools.util.logging.Logging;
import org.locationtech.jts.algorithm.Angle;
import org.locationtech.jts.algorithm.MinimumDiameter;
import org.locationtech.jts.geom.Coordinate;
import org.locationtech.jts.geom.Geometry;
import org.locationtech.jts.geom.GeometryFactory;
import org.locationtech.jts.geom.LinearRing;
import org.locationtech.jts.geom.MultiPolygon;
import org.locationtech.jts.geom.Point;
import org.locationtech.jts.geom.Polygon;
import org.locationtech.jts.geom.TopologyException;
import org.locationtech.jts.geom.impl.CoordinateArraySequence;
import org.locationtech.jts.geom.util.AffineTransformation;
import org.opengis.feature.simple.SimpleFeature;
import org.opengis.filter.FilterFactory;
import org.opengis.filter.PropertyIsEqualTo;
import org.opengis.geometry.DirectPosition;
import org.opengis.referencing.FactoryException;
import org.opengis.referencing.crs.CoordinateReferenceSystem;
import org.opengis.referencing.operation.MathTransform;
import org.opengis.referencing.operation.TransformException;
import org.opengis.util.ProgressListener;

/**
 * Creates a features containing lines generated by converting polygon boundaries to lines, or splitting line, polygon, or both features at their
 * intersections.
 * 
 * @author Minpa Lee, MangoSystem
 * 
 * @source $URL$
 */
public class LabelToGeometryProcess extends AbstractStatisticsProcess {
    protected static final Logger LOGGER = Logging.getLogger(LabelToGeometryProcess.class);

    public LabelToGeometryProcess(ProcessFactory factory) {
        super(factory);
    }

    public ProcessFactory getFactory() {
        return factory;
    }

    public static SimpleFeatureCollection process(SimpleFeatureCollection inputFeatures,
            String labelAttributeName, String fontName, Integer fontType,
            ProgressListener monitor) {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put(LabelToGeometryFactory.inputFeatures.key, inputFeatures);
        map.put(LabelToGeometryFactory.labelAttributeName.key, labelAttributeName);
        map.put(LabelToGeometryFactory.fontName.key, fontName);
        map.put(LabelToGeometryFactory.fontType.key, fontType);

        Process process = new LabelToGeometryProcess(null);
        Map<String, Object> resultMap;
        try {
            resultMap = process.execute(map, monitor);

            return (SimpleFeatureCollection) resultMap.get(FeatureToLineProcessFactory.RESULT.key);
        } catch (ProcessException e) {
            LOGGER.log(Level.FINER, e.getMessage(), e);
        }

        return null;
    }

    @Override
    public Map<String, Object> execute(Map<String, Object> input, ProgressListener monitor)
            throws ProcessException {
        SimpleFeatureCollection inputFeatures = (SimpleFeatureCollection) Params.getValue(input,
                LabelToGeometryFactory.inputFeatures, null);
        if (inputFeatures == null) {
            throw new NullPointerException("inputFeatures parameter required");
        }

        String labelAttributeName = (String) Params.getValue(input,
                LabelToGeometryFactory.labelAttributeName,
                LabelToGeometryFactory.labelAttributeName.sample);

        String fontName = (String) Params.getValue(input, LabelToGeometryFactory.fontName,
                LabelToGeometryFactory.fontName.sample);

        Integer fontType = (Integer) Params.getValue(input, LabelToGeometryFactory.fontType,
                LabelToGeometryFactory.fontType.sample);

        // start process
        Map<String, Object> resultMap = null;
        try {
            // LabelToGeometryProcess operation = new LabelToGeometryProcess();
            resultMap = execute(inputFeatures, labelAttributeName, fontName, fontType);
        } catch (ProcessException e) {
            throw new ProcessException(e);
        }
        // end process

        return resultMap;
    }

    public Map<String, Object> execute(SimpleFeatureCollection inputFeatures,
            String labelAttributeName, String fontName, Integer fontType) throws ProcessException {

        int maxValue = 30;
        int minValue = 1;
        Boolean representative = true;
        String attName = labelAttributeName;
        // int fontSize = 10;

        if (inputFeatures == null) {
            throw new NullPointerException("inputFeatures parameter required");
        }

        // start process
        SimpleFeatureCollection resultFc = null;
        try {
            LabelToGeometryOperation operation = new LabelToGeometryOperation();
            resultFc = operation.execute(inputFeatures, labelAttributeName, fontName, fontType);
        } catch (IOException e) {
            throw new ProcessException(e);
        }
        // end process

        Map<String, Object> resultMap = new HashMap<String, Object>();
        resultMap.put(FeatureToPolygonProcessFactory.RESULT.key, resultFc);
        return resultMap;
    }

    public static void main(String[] args) {
        try {

            LabelToGeometryProcess l2gProcess = new LabelToGeometryProcess(null);
            FeatureToMaximumInscribedRectangleProcess featureToMaximumInscribedRectangleProcess = new FeatureToMaximumInscribedRectangleProcess(null);
            
            File shpFile = new File("C:\\Users\\jya12\\Downloads\\lsmd_cont_ldgreg");
            Map<String, Object> shpMap = new HashMap<>();
            shpMap.put("url", shpFile.toURI().toURL());
            shpMap.put(ShapefileDataStoreFactory.DBFCHARSET.key, "utf-8");

            DataStore dataStore = DataStoreFinder.getDataStore(shpMap);
            SimpleFeatureSource sfs = dataStore.getFeatureSource("LSMD_CONT_LDREG_11_202304");
            SimpleFeatureCollection sfc = sfs.getFeatures();
            FilterFactory ff = new FilterFactoryImpl();
            //PropertyIsEqualTo piet = ff.equals(ff.property("COL_ADM_SE"), ff.literal("11560"));
            PropertyIsEqualTo piet = ff.equals(ff.property("PNU"), ff.literal("1156010500104420004"));
            
            sfc = sfc.subCollection(piet);
            
            SimpleFeatureCollection result = null;
            
            Map<String, Object> map = l2gProcess.execute(sfc, "JIBUN", "BatangChe", 1);
            result = (SimpleFeatureCollection) map.get(LabelToGeometryFactory.RESULT.key);
            
            //result = FeatureToMaximumInscribedRectangleProcess.process(sfc, true, false, null);
            
            ShapeExportOperation sep = new ShapeExportOperation();
            sep.setOutputDataStore(dataStore);
            sep.setOutputTypeName("LSMD_CONT_LDREG_11_202304_11560_LBL4");
            sep.execute(result);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
